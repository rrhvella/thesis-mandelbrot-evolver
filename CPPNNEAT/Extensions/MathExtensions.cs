using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Numerics;

namespace CPPNNEAT.Extensions
{
    /// <summary>
    /// A few useful math functions which are not present in the default math class.
    /// </summary>
    public static class MathExtensions
    {
        /// <summary>
        /// The random object used in the random functions.
        /// </summary>
        private static Random random;

        static MathExtensions()
        {
            random = new Random();
        }

        /// <summary>
        /// Returns a uniformally distributed random number between 0 and 1.
        /// </summary>
        /// <returns></returns>
        public static double RandomNumber()
        {
            double result = 0;

            lock (random)
            {
                result = random.NextDouble();
            }

            return result;
        }

        /// <summary>
        /// Returns a uniformally distributed random integer between from and to.
        /// </summary>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <returns></returns>
        public static int RandomInteger(int from, int to)
        {
            int result = 0;

            lock (random)
            {
                result = random.Next(from, to);
            }

            return result;
        }

        /// <summary>
        /// Returns a uniformally distributed random integer up to max.
        /// </summary>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <returns></returns>
        public static int RandomInteger(int max)
        {
            return RandomInteger(0, max);
        }
        
        /// <summary>
        /// Returns the euclidean distance from the origin to (x, y).
        /// </summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns></returns>
        public static double EuclideanDistance(double x, double y)
        {
            return Math.Sqrt(x*x + y*y);
        }

        /// <summary>
        /// Returns the absolute value of n if it were generated by a modular arithmetic
        /// operation with modulus b.
        /// </summary>
        /// <param name="n"></param>
        /// <param name="b"></param>
        /// <returns></returns>
        public static int AbsMod(int n, int b)
        {
            n %= b;

            if(n < 0) 
            {
                n += b;     
            }

            return n;
        }

        /// <summary>
        /// Returns a random complex normal.
        /// </summary>
        /// <returns></returns>
        public static Complex ComplexRandom()
        {
            return ComplexRandom(1);
        }

        /// <summary>
        /// Returns a complex number with a random phase and a magnitude between from 
        /// and to.
        /// </summary>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <returns></returns>
        public static Complex ComplexRandom(double from, double to)
        {
            var r = RandomNumber(from, to);
            var a = RandomNumber();

            return Complex.FromPolarCoordinates(r, a * Math.PI);
        }

        /// <summary>
        /// Returns a complex number with a random phase and a magnitude up to max.
        /// </summary>
        /// <param name="max"></param>
        /// <returns></returns>
        public static Complex ComplexRandom(double max)
        {
            return ComplexRandom(0, max);
        }

        /// <summary>
        /// Returns a random real number between from and to.
        /// </summary>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <returns></returns>
        public static double RandomNumber(double from, double to)
        {
            return from + (to - from) * RandomNumber();
        }

    }
}
